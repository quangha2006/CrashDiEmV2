<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="backgroundWorker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>